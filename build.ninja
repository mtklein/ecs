builddir = out

san  = address,integer,undefined
dbg  = -fsanitize=$san -fno-sanitize-recover=$san -fprofile-instr-generate -fcoverage-mapping
cc   = clang
warn = -Weverything $
       -Wno-declaration-after-statement $
       -Wno-poison-system-directories $
       -Wno-switch-default $
       -Wno-unsafe-buffer-usage $

rule compile
    command = $cc -g -Og -Werror $warn -fcolor-diagnostics -MD -MF $out.d -c $in -o $out
    depfile = $out.d
    deps    = gcc

rule link
    command = $cc -lm $in -o $out

rule run
    command = LLVM_PROFILE_FILE=$in.profraw ./$in > $out

build out/bench.o: compile bench.c
build out/opt.o:   compile ecs.c
build out/dbg.o:   compile ecs.c
    cc = $cc $dbg
build out/test.o:  compile test.c
    cc = $cc $dbg
build out/systems_test.o: compile systems_test.c
    cc = $cc $dbg
build out/systems.o: compile systems.c
    cc = $cc $dbg
build out/aihack.o: compile aihack.c
    cc = $cc $dbg

build out/bench:  link out/bench.o out/opt.o
build out/test:   link out/test.o  out/dbg.o
    cc = $cc $dbg
build out/systems_test: link out/systems_test.o out/systems.o out/dbg.o
    cc = $cc $dbg
build out/aihack: link out/aihack.o out/systems.o out/dbg.o
    cc = $cc $dbg

build out/test.ok: run out/test
build out/systems_test.ok: run out/systems_test
