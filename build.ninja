builddir = out

path = env PATH=/opt/homebrew/opt/llvm/bin:$$PATH
san  = address,integer,undefined
cc   = clang -fsanitize=$san -fno-sanitize-recover=$san -fprofile-instr-generate -fcoverage-mapping
warn = -Weverything $
       -Wno-declaration-after-statement $
       -Wno-poison-system-directories $
       -Wno-switch-default $
       -Wno-unsafe-buffer-usage $

rule compile
    command = $path $cc -g -Og -Werror $warn -fcolor-diagnostics -MD -MF $out.d -c $in -o $out
    depfile = $out.d
    deps    = gcc

rule link
    command = $path $cc -lm $in -o $out

rule run
    command = LLVM_PROFILE_FILE=$in.profraw ./$in > $out

rule mergecov
    command = $path llvm-profdata merge -sparse $in -o $out

rule reportcov
    command = $path llvm-cov report -object out/ecs_test -object out/systems_test $
               -instr-profile=$in > $out

rule showcov
    command = $path llvm-cov show -object out/ecs_test -object out/systems_test $
               -instr-profile=$in > $out

build out/bench.o: compile bench.c
    cc = clang
build out/bench:   link out/bench.o
    cc = clang

build out/aihack.o:       compile aihack.c
build out/ecs.o:          compile ecs.c
build out/ecs_test.o:     compile ecs_test.c
build out/systems.o:      compile systems.c
build out/systems_test.o: compile systems_test.c

build out/aihack:       link out/aihack.o       out/ecs.o out/systems.o
build out/ecs_test:     link out/ecs_test.o     out/ecs.o
build out/systems_test: link out/systems_test.o out/ecs.o out/systems.o

build out/ecs_test.ok     | out/ecs_test.profraw:     run out/ecs_test
build out/systems_test.ok | out/systems_test.profraw: run out/systems_test

build out/coverage.profdata: mergecov out/ecs_test.profraw out/systems_test.profraw
build out/coverage.report:  reportcov out/coverage.profdata | out/ecs_test out/systems_test
build out/coverage.detail:    showcov out/coverage.profdata | out/ecs_test out/systems_test

